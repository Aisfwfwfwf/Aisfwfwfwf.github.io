class CheesecakeApp {
    constructor() {
        this.tg = window.Telegram?.WebApp;
        this.cart = {};
        this.products = [];
        this.deliveryCost = 200;
        this.isInitialized = false;
        this.botUsername = '@Syrniki_S_bot'; // –ó–ê–ú–ï–ù–ò–¢–ï –Ω–∞ username –≤–∞—à–µ–≥–æ –±–æ—Ç–∞

        this.initializeElements();
        this.loadProductsData();
    }

    initializeElements() {
        this.elements = {
            productsList: document.getElementById('productsList'),
            cartButton: document.getElementById('cartButton'),
            cartPopup: document.getElementById('cartPopup'),
            cartItems: document.getElementById('cartItems'),
            totalPrice: document.getElementById('totalPrice'),
            orderButton: document.getElementById('orderButton'),
            closeCart: document.getElementById('closeCart'),
            orderPopup: document.getElementById('orderPopup'),
            deliveryType: document.getElementById('deliveryType'),
            addressField: document.getElementById('addressField'),
            finalPrice: document.getElementById('finalPrice'),
            confirmOrderButton: document.getElementById('confirmOrderButton'),
            backToCartButton: document.getElementById('backToCartButton'),
            userName: document.getElementById('userName'),
            userPhone: document.getElementById('userPhone'),
            userAddress: document.getElementById('userAddress'),
            userComment: document.getElementById('userComment')
        };
    }

    loadProductsData() {
        this.products = [
            {
                id: 1,
                name: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Å—ã—Ä–Ω–∏–∫–∏",
                description: "–° –Ω–µ–∂–Ω–æ–π —Å–º–µ—Ç–∞–Ω–æ–π –∏ –≤–∞–Ω–∏–ª—å—é",
                price: 250,
                image: "https://github.com/Aisfwfwfwf/Aisfwfwfwf.github.io/raw/main/1.jpg",
                backupImage: "https://img.freepik.com/free-photo/syrniki-with-sour-cream_2829-11139.jpg"
            },
            {
                id: 2,
                name: "–°—ã—Ä–Ω–∏–∫–∏ —Å —à–æ–∫–æ–ª–∞–¥–æ–º", 
                description: "–° –∫—É—Å–æ—á–∫–∞–º–∏ —á–µ—Ä–Ω–æ–≥–æ —à–æ–∫–æ–ª–∞–¥–∞",
                price: 280,
                image: "https://github.com/Aisfwfwfwf/Aisfwfwfwf.github.io/raw/main/2.jpg",
                backupImage: "https://img.freepik.com/free-photo/chocolate-cheesecakes_144627-566.jpg"
            },
            {
                id: 3,
                name: "–°—ã—Ä–Ω–∏–∫–∏ —Å –∏–∑—é–º–æ–º",
                description: "–°–æ—á–Ω—ã–µ —Å –≤–∏–Ω–æ–≥—Ä–∞–¥–Ω—ã–º –∏–∑—é–º–æ–º",
                price: 270,
                image: "https://github.com/Aisfwfwfwf/Aisfwfwfwf.github.io/raw/main/3.jpg",
                backupImage: "https://img.freepik.com/free-photo/raisin-cheesecakes_144627-565.jpg"
            },
            {
                id: 4,
                name: "–í–µ–≥–∞–Ω—Å–∫–∏–µ —Å—ã—Ä–Ω–∏–∫–∏",
                description: "–ù–∞ –∫–æ–∫–æ—Å–æ–≤—ã—Ö —Å–ª–∏–≤–∫–∞—Ö –±–µ–∑ —è–∏—Ü",
                price: 300,
                image: "https://github.com/Aisfwfwfwf/Aisfwfwfwf.github.io/raw/main/4.jpg",
                backupImage: "https://img.freepik.com/free-photo/vegan-cheesecakes_144627-567.jpg"
            }
        ];
    }

    async init() {
        if (this.isInitialized) return;
        this.isInitialized = true;

        if (this.tg) {
            this.tg.expand();
            this.tg.enableClosingConfirmation();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞" –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ Telegram
            this.showBotButton();
        }

        await this.renderProducts();
        this.setupEventListeners();
        this.updateCart();
    }

    showBotButton() {
        const botButton = document.createElement('button');
        botButton.className = 'bot-button';
        botButton.innerHTML = 'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É';
        botButton.onclick = () => {
            window.open(`https://t.me/${this.botUsername}`, '_blank');
        };
        
        document.querySelector('.header').appendChild(botButton);
    }

    async renderProducts() {
        this.elements.productsList.innerHTML = '';
        
        for (const product of this.products) {
            const workingImage = await this.getWorkingImage(product);
            
            const productCard = document.createElement('div');
            productCard.className = 'product-card';
            productCard.innerHTML = `
                <img src="${workingImage}" alt="${product.name}" class="product-image" 
                     onerror="this.src='${product.backupImage}'">
                <div class="product-title">${product.name}</div>
                <div class="product-description">${product.description}</div>
                <div class="product-price">${product.price} —Ä—É–±.</div>
                <div class="product-controls">
                    <button class="quantity-btn" data-action="decrease" data-id="${product.id}">-</button>
                    <span class="quantity">${this.cart[product.id] || 0}</span>
                    <button class="quantity-btn" data-action="increase" data-id="${product.id}">+</button>
                </div>
            `;
            this.elements.productsList.appendChild(productCard);
        }
    }

    async getWorkingImage(product) {
        return new Promise((resolve) => {
            const img = new Image();
            img.onload = () => resolve(product.image);
            img.onerror = () => resolve(product.backupImage);
            img.src = product.image;
        });
    }

    setupEventListeners() {
        this.elements.productsList.addEventListener('click', (e) => {
            const button = e.target.closest('[data-action]');
            if (button) {
                const productId = parseInt(button.dataset.id);
                const action = button.dataset.action;
                this.changeQuantity(productId, action === 'increase' ? 1 : -1);
            }
        });

        this.elements.cartButton.addEventListener('click', () => {
            this.elements.cartPopup.style.display = 'flex';
        });

        this.elements.closeCart.addEventListener('click', () => {
            this.elements.cartPopup.style.display = 'none';
        });

        this.elements.orderButton.addEventListener('click', () => {
            this.openOrderPopup();
        });

        this.elements.backToCartButton.addEventListener('click', () => {
            this.closeOrderPopup();
        });

        this.elements.confirmOrderButton.addEventListener('click', () => {
            this.sendOrderToBot();
        });

        this.elements.deliveryType.addEventListener('change', () => {
            this.toggleAddressField();
            this.calculateFinalTotal();
        });

        [this.elements.cartPopup, this.elements.orderPopup].forEach(popup => {
            popup.addEventListener('click', (e) => {
                if (e.target === popup) {
                    popup.style.display = 'none';
                }
            });
        });
    }

    changeQuantity(productId, delta) {
        if (!this.cart[productId]) this.cart[productId] = 0;
        this.cart[productId] += delta;
        
        if (this.cart[productId] < 0) this.cart[productId] = 0;
        
        this.updateProductQuantity(productId);
        this.updateCart();
    }

    updateProductQuantity(productId) {
        const button = this.elements.productsList.querySelector(`[data-id="${productId}"][data-action]`);
        if (button) {
            const productCard = button.closest('.product-card');
            const quantityElement = productCard.querySelector('.quantity');
            if (quantityElement) {
                quantityElement.textContent = this.cart[productId] || 0;
            }
        }
    }

    updateCart() {
        let total = 0;
        let totalCount = 0;
        
        for (const productId in this.cart) {
            if (this.cart[productId] > 0) {
                const product = this.products.find(p => p.id == productId);
                if (product) {
                    total += product.price * this.cart[productId];
                    totalCount += this.cart[productId];
                }
            }
        }
        
        this.elements.cartButton.textContent = `–ö–æ—Ä–∑–∏–Ω–∞ (${totalCount}) | ${total} —Ä—É–±.`;
        this.renderCartItems();
        this.elements.totalPrice.textContent = total;
        this.elements.finalPrice.textContent = total;
    }

    renderCartItems() {
        this.elements.cartItems.innerHTML = '';
        let isEmpty = true;
        
        for (const productId in this.cart) {
            if (this.cart[productId] > 0) {
                isEmpty = false;
                const product = this.products.find(p => p.id == productId);
                if (product) {
                    const cartItem = document.createElement('div');
                    cartItem.className = 'cart-item';
                    cartItem.innerHTML = `
                        <div>
                            <div>${product.name}</div>
                            <div>${product.price} —Ä—É–±. x ${this.cart[productId]}</div>
                        </div>
                        <div>${product.price * this.cart[productId]} —Ä—É–±.</div>
                    `;
                    this.elements.cartItems.appendChild(cartItem);
                }
            }
        }
        
        if (isEmpty) {
            this.elements.cartItems.innerHTML = '<div class="cart-empty">–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</div>';
            this.elements.orderButton.style.display = 'none';
        } else {
            this.elements.orderButton.style.display = 'block';
        }
    }

    openOrderPopup() {
        this.calculateFinalTotal();
        this.elements.orderPopup.style.display = 'flex';
        this.elements.cartPopup.style.display = 'none';
    }

    closeOrderPopup() {
        this.elements.orderPopup.style.display = 'none';
        this.elements.cartPopup.style.display = 'flex';
    }

    toggleAddressField() {
        this.elements.addressField.style.display = 
            this.elements.deliveryType.value === 'delivery' ? 'block' : 'none';
        
        this.elements.userAddress.required = this.elements.deliveryType.value === 'delivery';
    }

    calculateFinalTotal() {
        let productsTotal = parseInt(this.elements.totalPrice.textContent) || 0;
        let delivery = this.elements.deliveryType.value === 'delivery' ? this.deliveryCost : 0;
        let finalTotal = productsTotal + delivery;
        
        this.elements.finalPrice.textContent = finalTotal;
        return finalTotal;
    }

    validateForm() {
        if (!this.elements.userName.value.trim()) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è');
            return false;
        }
        
        if (!this.elements.userPhone.value.trim()) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω');
            return false;
        }
        
        if (!this.elements.deliveryType.value) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è');
            return false;
        }
        
        if (this.elements.deliveryType.value === 'delivery' && !this.elements.userAddress.value.trim()) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏');
            return false;
        }

        return true;
    }

    sendOrderToBot() {
        if (!this.validateForm()) return;

        const orderData = {
            products: [],
            total: this.calculateFinalTotal(),
            deliveryType: this.elements.deliveryType.value,
            deliveryCost: this.elements.deliveryType.value === 'delivery' ? this.deliveryCost : 0,
            customer: {
                name: this.elements.userName.value.trim(),
                phone: this.elements.userPhone.value.trim(),
                address: this.elements.userAddress.value.trim() || '–°–∞–º–æ–≤—ã–≤–æ–∑',
                comment: this.elements.userComment.value.trim()
            },
            timestamp: new Date().toISOString(),
            orderId: this.generateOrderId()
        };
        
        for (const productId in this.cart) {
            if (this.cart[productId] > 0) {
                const product = this.products.find(p => p.id == productId);
                if (product) {
                    orderData.products.push({
                        id: product.id,
                        name: product.name,
                        quantity: this.cart[productId],
                        price: product.price
                    });
                }
            }
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ localStorage
        this.saveOrderToLocalStorage(orderData);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ WebApp
        if (this.tg && this.tg.sendData) {
            try {
                this.tg.sendData(JSON.stringify(orderData));
                this.showSuccessMessage(orderData);
            } catch (error) {
                console.error('WebApp error:', error);
                this.showBotInstructions(orderData);
            }
        } else {
            this.showBotInstructions(orderData);
        }
    }

    generateOrderId() {
        return 'CH' + Date.now().toString().slice(-6);
    }

    saveOrderToLocalStorage(orderData) {
        const orders = JSON.parse(localStorage.getItem('cheesecake_orders') || '[]');
        orders.push(orderData);
        localStorage.setItem('cheesecake_orders', JSON.stringify(orders));
    }

    showSuccessMessage(orderData) {
        if (this.tg && this.tg.showPopup) {
            this.tg.showPopup({ 
                title: "‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!", 
                message: "–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è." 
            });
        } else {
            alert('‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º.');
        }
        
        // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        this.clearCart();
    }

    showBotInstructions(orderData) {
        const message = this.formatOrderMessage(orderData);
        
        const modal = document.createElement('div');
        modal.className = 'instruction-modal';
        modal.innerHTML = `
            <div class="modal-content">
                <h3>‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</h3>
                <p>–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç —á–µ–∫ –Ω–∞—à–µ–º—É –±–æ—Ç—É:</p>
                <div class="order-check">
                    <pre>${message}</pre>
                </div>
                <div class="modal-buttons">
                    <button onclick="window.open('https://t.me/${this.botUsername}', '_blank')">
                        üí¨ –û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞
                    </button>
                    <button onclick="this.closest('.instruction-modal').style.display='none'">
                        –ó–∞–∫—Ä—ã—Ç—å
                    </button>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        this.clearCart();
    }

    formatOrderMessage(orderData) {
        const productsList = orderData.products.map(p => 
            `${p.name} √ó ${p.quantity} = ${p.quantity * p.price} —Ä—É–±.`
        ).join('\n');

        return `
üç∞ –ß–ï–ö –ó–ê–ö–ê–ó–ê #${orderData.orderId}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üë§ –ö–õ–ò–ï–ù–¢: ${orderData.customer.name}
üìû –¢–ï–õ–ï–§–û–ù: ${orderData.customer.phone}
üìç ${orderData.deliveryType === 'delivery' ? '–î–û–°–¢–ê–í–ö–ê' : '–°–ê–ú–û–í–´–í–û–ó'}

${orderData.deliveryType === 'delivery' ? `üè† –ê–î–†–ï–°: ${orderData.customer.address}\n` : ''}
üõí –ó–ê–ö–ê–ó:
${productsList}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üíµ –°–£–ú–ú–ê: ${orderData.total - orderData.deliveryCost} —Ä—É–±.
üöó –î–û–°–¢–ê–í–ö–ê: ${orderData.deliveryCost} —Ä—É–±.
üí∞ –ò–¢–û–ì–û: ${orderData.total} —Ä—É–±.

üìù –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô: ${orderData.customer.comment || '–Ω–µ—Ç'}
üïí –í–†–ï–ú–Ø: ${new Date().toLocaleString('ru-RU')}
        `.trim();
    }

    clearCart() {
        this.cart = {};
        this.updateCart();
        this.closeOrderPopup();
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        this.elements.userName.value = '';
        this.elements.userPhone.value = '';
        this.elements.userAddress.value = '';
        this.elements.userComment.value = '';
        this.elements.deliveryType.selectedIndex = 0;
        this.toggleAddressField();
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    const app = new CheesecakeApp();
    app.init();
});
